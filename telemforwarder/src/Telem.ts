/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: Telem.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Altitude extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        altitude_monotonic_m?: number;
        altitude_amsl_m?: number;
        altitude_local_m?: number;
        altitude_relative_m?: number;
        altitude_terrain_m?: number;
        bottom_clearance_m?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("altitude_monotonic_m" in data && data.altitude_monotonic_m != undefined) {
                this.altitude_monotonic_m = data.altitude_monotonic_m;
            }
            if ("altitude_amsl_m" in data && data.altitude_amsl_m != undefined) {
                this.altitude_amsl_m = data.altitude_amsl_m;
            }
            if ("altitude_local_m" in data && data.altitude_local_m != undefined) {
                this.altitude_local_m = data.altitude_local_m;
            }
            if ("altitude_relative_m" in data && data.altitude_relative_m != undefined) {
                this.altitude_relative_m = data.altitude_relative_m;
            }
            if ("altitude_terrain_m" in data && data.altitude_terrain_m != undefined) {
                this.altitude_terrain_m = data.altitude_terrain_m;
            }
            if ("bottom_clearance_m" in data && data.bottom_clearance_m != undefined) {
                this.bottom_clearance_m = data.bottom_clearance_m;
            }
        }
    }
    get altitude_monotonic_m() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set altitude_monotonic_m(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get altitude_amsl_m() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set altitude_amsl_m(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get altitude_local_m() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set altitude_local_m(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get altitude_relative_m() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set altitude_relative_m(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get altitude_terrain_m() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set altitude_terrain_m(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get bottom_clearance_m() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set bottom_clearance_m(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        altitude_monotonic_m?: number;
        altitude_amsl_m?: number;
        altitude_local_m?: number;
        altitude_relative_m?: number;
        altitude_terrain_m?: number;
        bottom_clearance_m?: number;
    }): Altitude {
        const message = new Altitude({});
        if (data.altitude_monotonic_m != null) {
            message.altitude_monotonic_m = data.altitude_monotonic_m;
        }
        if (data.altitude_amsl_m != null) {
            message.altitude_amsl_m = data.altitude_amsl_m;
        }
        if (data.altitude_local_m != null) {
            message.altitude_local_m = data.altitude_local_m;
        }
        if (data.altitude_relative_m != null) {
            message.altitude_relative_m = data.altitude_relative_m;
        }
        if (data.altitude_terrain_m != null) {
            message.altitude_terrain_m = data.altitude_terrain_m;
        }
        if (data.bottom_clearance_m != null) {
            message.bottom_clearance_m = data.bottom_clearance_m;
        }
        return message;
    }
    toObject() {
        const data: {
            altitude_monotonic_m?: number;
            altitude_amsl_m?: number;
            altitude_local_m?: number;
            altitude_relative_m?: number;
            altitude_terrain_m?: number;
            bottom_clearance_m?: number;
        } = {};
        if (this.altitude_monotonic_m != null) {
            data.altitude_monotonic_m = this.altitude_monotonic_m;
        }
        if (this.altitude_amsl_m != null) {
            data.altitude_amsl_m = this.altitude_amsl_m;
        }
        if (this.altitude_local_m != null) {
            data.altitude_local_m = this.altitude_local_m;
        }
        if (this.altitude_relative_m != null) {
            data.altitude_relative_m = this.altitude_relative_m;
        }
        if (this.altitude_terrain_m != null) {
            data.altitude_terrain_m = this.altitude_terrain_m;
        }
        if (this.bottom_clearance_m != null) {
            data.bottom_clearance_m = this.bottom_clearance_m;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.altitude_monotonic_m != 0)
            writer.writeFloat(1, this.altitude_monotonic_m);
        if (this.altitude_amsl_m != 0)
            writer.writeFloat(2, this.altitude_amsl_m);
        if (this.altitude_local_m != 0)
            writer.writeFloat(3, this.altitude_local_m);
        if (this.altitude_relative_m != 0)
            writer.writeFloat(4, this.altitude_relative_m);
        if (this.altitude_terrain_m != 0)
            writer.writeFloat(5, this.altitude_terrain_m);
        if (this.bottom_clearance_m != 0)
            writer.writeFloat(6, this.bottom_clearance_m);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Altitude {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Altitude();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.altitude_monotonic_m = reader.readFloat();
                    break;
                case 2:
                    message.altitude_amsl_m = reader.readFloat();
                    break;
                case 3:
                    message.altitude_local_m = reader.readFloat();
                    break;
                case 4:
                    message.altitude_relative_m = reader.readFloat();
                    break;
                case 5:
                    message.altitude_terrain_m = reader.readFloat();
                    break;
                case 6:
                    message.bottom_clearance_m = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Altitude {
        return Altitude.deserialize(bytes);
    }
}
export class Battery extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        temperature_degc?: number;
        voltage_v?: number;
        current_battery_a?: number;
        capacity_consumed_ah?: number;
        remaining_percent?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("temperature_degc" in data && data.temperature_degc != undefined) {
                this.temperature_degc = data.temperature_degc;
            }
            if ("voltage_v" in data && data.voltage_v != undefined) {
                this.voltage_v = data.voltage_v;
            }
            if ("current_battery_a" in data && data.current_battery_a != undefined) {
                this.current_battery_a = data.current_battery_a;
            }
            if ("capacity_consumed_ah" in data && data.capacity_consumed_ah != undefined) {
                this.capacity_consumed_ah = data.capacity_consumed_ah;
            }
            if ("remaining_percent" in data && data.remaining_percent != undefined) {
                this.remaining_percent = data.remaining_percent;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get temperature_degc() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set temperature_degc(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get voltage_v() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set voltage_v(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get current_battery_a() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set current_battery_a(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get capacity_consumed_ah() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set capacity_consumed_ah(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get remaining_percent() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set remaining_percent(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: number;
        temperature_degc?: number;
        voltage_v?: number;
        current_battery_a?: number;
        capacity_consumed_ah?: number;
        remaining_percent?: number;
    }): Battery {
        const message = new Battery({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.temperature_degc != null) {
            message.temperature_degc = data.temperature_degc;
        }
        if (data.voltage_v != null) {
            message.voltage_v = data.voltage_v;
        }
        if (data.current_battery_a != null) {
            message.current_battery_a = data.current_battery_a;
        }
        if (data.capacity_consumed_ah != null) {
            message.capacity_consumed_ah = data.capacity_consumed_ah;
        }
        if (data.remaining_percent != null) {
            message.remaining_percent = data.remaining_percent;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            temperature_degc?: number;
            voltage_v?: number;
            current_battery_a?: number;
            capacity_consumed_ah?: number;
            remaining_percent?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.temperature_degc != null) {
            data.temperature_degc = this.temperature_degc;
        }
        if (this.voltage_v != null) {
            data.voltage_v = this.voltage_v;
        }
        if (this.current_battery_a != null) {
            data.current_battery_a = this.current_battery_a;
        }
        if (this.capacity_consumed_ah != null) {
            data.capacity_consumed_ah = this.capacity_consumed_ah;
        }
        if (this.remaining_percent != null) {
            data.remaining_percent = this.remaining_percent;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeFloat(1, this.id);
        if (this.temperature_degc != 0)
            writer.writeFloat(2, this.temperature_degc);
        if (this.voltage_v != 0)
            writer.writeFloat(3, this.voltage_v);
        if (this.current_battery_a != 0)
            writer.writeFloat(4, this.current_battery_a);
        if (this.capacity_consumed_ah != 0)
            writer.writeFloat(5, this.capacity_consumed_ah);
        if (this.remaining_percent != 0)
            writer.writeFloat(6, this.remaining_percent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Battery {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Battery();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readFloat();
                    break;
                case 2:
                    message.temperature_degc = reader.readFloat();
                    break;
                case 3:
                    message.voltage_v = reader.readFloat();
                    break;
                case 4:
                    message.current_battery_a = reader.readFloat();
                    break;
                case 5:
                    message.capacity_consumed_ah = reader.readFloat();
                    break;
                case 6:
                    message.remaining_percent = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Battery {
        return Battery.deserialize(bytes);
    }
}
export class Position extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        latitude_deg?: number;
        longitude_deg?: number;
        absolute_altitude_m?: number;
        relative_altitude_m?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("latitude_deg" in data && data.latitude_deg != undefined) {
                this.latitude_deg = data.latitude_deg;
            }
            if ("longitude_deg" in data && data.longitude_deg != undefined) {
                this.longitude_deg = data.longitude_deg;
            }
            if ("absolute_altitude_m" in data && data.absolute_altitude_m != undefined) {
                this.absolute_altitude_m = data.absolute_altitude_m;
            }
            if ("relative_altitude_m" in data && data.relative_altitude_m != undefined) {
                this.relative_altitude_m = data.relative_altitude_m;
            }
        }
    }
    get latitude_deg() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set latitude_deg(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get longitude_deg() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set longitude_deg(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get absolute_altitude_m() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set absolute_altitude_m(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get relative_altitude_m() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set relative_altitude_m(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        latitude_deg?: number;
        longitude_deg?: number;
        absolute_altitude_m?: number;
        relative_altitude_m?: number;
    }): Position {
        const message = new Position({});
        if (data.latitude_deg != null) {
            message.latitude_deg = data.latitude_deg;
        }
        if (data.longitude_deg != null) {
            message.longitude_deg = data.longitude_deg;
        }
        if (data.absolute_altitude_m != null) {
            message.absolute_altitude_m = data.absolute_altitude_m;
        }
        if (data.relative_altitude_m != null) {
            message.relative_altitude_m = data.relative_altitude_m;
        }
        return message;
    }
    toObject() {
        const data: {
            latitude_deg?: number;
            longitude_deg?: number;
            absolute_altitude_m?: number;
            relative_altitude_m?: number;
        } = {};
        if (this.latitude_deg != null) {
            data.latitude_deg = this.latitude_deg;
        }
        if (this.longitude_deg != null) {
            data.longitude_deg = this.longitude_deg;
        }
        if (this.absolute_altitude_m != null) {
            data.absolute_altitude_m = this.absolute_altitude_m;
        }
        if (this.relative_altitude_m != null) {
            data.relative_altitude_m = this.relative_altitude_m;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.latitude_deg != 0)
            writer.writeFloat(1, this.latitude_deg);
        if (this.longitude_deg != 0)
            writer.writeFloat(2, this.longitude_deg);
        if (this.absolute_altitude_m != 0)
            writer.writeFloat(3, this.absolute_altitude_m);
        if (this.relative_altitude_m != 0)
            writer.writeFloat(4, this.relative_altitude_m);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.latitude_deg = reader.readFloat();
                    break;
                case 2:
                    message.longitude_deg = reader.readFloat();
                    break;
                case 3:
                    message.absolute_altitude_m = reader.readFloat();
                    break;
                case 4:
                    message.relative_altitude_m = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Position {
        return Position.deserialize(bytes);
    }
}
export class Attitude extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        roll_deg?: number;
        pitch_deg?: number;
        yaw_deg?: number;
        timestamp_us?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("roll_deg" in data && data.roll_deg != undefined) {
                this.roll_deg = data.roll_deg;
            }
            if ("pitch_deg" in data && data.pitch_deg != undefined) {
                this.pitch_deg = data.pitch_deg;
            }
            if ("yaw_deg" in data && data.yaw_deg != undefined) {
                this.yaw_deg = data.yaw_deg;
            }
            if ("timestamp_us" in data && data.timestamp_us != undefined) {
                this.timestamp_us = data.timestamp_us;
            }
        }
    }
    get roll_deg() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set roll_deg(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get pitch_deg() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set pitch_deg(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get yaw_deg() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set yaw_deg(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get timestamp_us() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set timestamp_us(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        roll_deg?: number;
        pitch_deg?: number;
        yaw_deg?: number;
        timestamp_us?: number;
    }): Attitude {
        const message = new Attitude({});
        if (data.roll_deg != null) {
            message.roll_deg = data.roll_deg;
        }
        if (data.pitch_deg != null) {
            message.pitch_deg = data.pitch_deg;
        }
        if (data.yaw_deg != null) {
            message.yaw_deg = data.yaw_deg;
        }
        if (data.timestamp_us != null) {
            message.timestamp_us = data.timestamp_us;
        }
        return message;
    }
    toObject() {
        const data: {
            roll_deg?: number;
            pitch_deg?: number;
            yaw_deg?: number;
            timestamp_us?: number;
        } = {};
        if (this.roll_deg != null) {
            data.roll_deg = this.roll_deg;
        }
        if (this.pitch_deg != null) {
            data.pitch_deg = this.pitch_deg;
        }
        if (this.yaw_deg != null) {
            data.yaw_deg = this.yaw_deg;
        }
        if (this.timestamp_us != null) {
            data.timestamp_us = this.timestamp_us;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.roll_deg != 0)
            writer.writeFloat(1, this.roll_deg);
        if (this.pitch_deg != 0)
            writer.writeFloat(2, this.pitch_deg);
        if (this.yaw_deg != 0)
            writer.writeFloat(3, this.yaw_deg);
        if (this.timestamp_us != 0)
            writer.writeFloat(4, this.timestamp_us);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attitude {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attitude();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.roll_deg = reader.readFloat();
                    break;
                case 2:
                    message.pitch_deg = reader.readFloat();
                    break;
                case 3:
                    message.yaw_deg = reader.readFloat();
                    break;
                case 4:
                    message.timestamp_us = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Attitude {
        return Attitude.deserialize(bytes);
    }
}
export class FixedwingMatrics extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        airspeed_m_s?: number;
        throttle_percentage?: number;
        climb_rate_m_s?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("airspeed_m_s" in data && data.airspeed_m_s != undefined) {
                this.airspeed_m_s = data.airspeed_m_s;
            }
            if ("throttle_percentage" in data && data.throttle_percentage != undefined) {
                this.throttle_percentage = data.throttle_percentage;
            }
            if ("climb_rate_m_s" in data && data.climb_rate_m_s != undefined) {
                this.climb_rate_m_s = data.climb_rate_m_s;
            }
        }
    }
    get airspeed_m_s() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set airspeed_m_s(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get throttle_percentage() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set throttle_percentage(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get climb_rate_m_s() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set climb_rate_m_s(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        airspeed_m_s?: number;
        throttle_percentage?: number;
        climb_rate_m_s?: number;
    }): FixedwingMatrics {
        const message = new FixedwingMatrics({});
        if (data.airspeed_m_s != null) {
            message.airspeed_m_s = data.airspeed_m_s;
        }
        if (data.throttle_percentage != null) {
            message.throttle_percentage = data.throttle_percentage;
        }
        if (data.climb_rate_m_s != null) {
            message.climb_rate_m_s = data.climb_rate_m_s;
        }
        return message;
    }
    toObject() {
        const data: {
            airspeed_m_s?: number;
            throttle_percentage?: number;
            climb_rate_m_s?: number;
        } = {};
        if (this.airspeed_m_s != null) {
            data.airspeed_m_s = this.airspeed_m_s;
        }
        if (this.throttle_percentage != null) {
            data.throttle_percentage = this.throttle_percentage;
        }
        if (this.climb_rate_m_s != null) {
            data.climb_rate_m_s = this.climb_rate_m_s;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.airspeed_m_s != 0)
            writer.writeFloat(1, this.airspeed_m_s);
        if (this.throttle_percentage != 0)
            writer.writeFloat(2, this.throttle_percentage);
        if (this.climb_rate_m_s != 0)
            writer.writeFloat(3, this.climb_rate_m_s);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FixedwingMatrics {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FixedwingMatrics();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.airspeed_m_s = reader.readFloat();
                    break;
                case 2:
                    message.throttle_percentage = reader.readFloat();
                    break;
                case 3:
                    message.climb_rate_m_s = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FixedwingMatrics {
        return FixedwingMatrics.deserialize(bytes);
    }
}
export class Health extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_gyrometer_calibration_ok?: boolean;
        is_accelerometer_calibration_ok?: boolean;
        is_magnetometer_calibration_ok?: boolean;
        is_local_position_ok?: boolean;
        is_global_position_ok?: boolean;
        is_home_position_ok?: boolean;
        is_armable?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_gyrometer_calibration_ok" in data && data.is_gyrometer_calibration_ok != undefined) {
                this.is_gyrometer_calibration_ok = data.is_gyrometer_calibration_ok;
            }
            if ("is_accelerometer_calibration_ok" in data && data.is_accelerometer_calibration_ok != undefined) {
                this.is_accelerometer_calibration_ok = data.is_accelerometer_calibration_ok;
            }
            if ("is_magnetometer_calibration_ok" in data && data.is_magnetometer_calibration_ok != undefined) {
                this.is_magnetometer_calibration_ok = data.is_magnetometer_calibration_ok;
            }
            if ("is_local_position_ok" in data && data.is_local_position_ok != undefined) {
                this.is_local_position_ok = data.is_local_position_ok;
            }
            if ("is_global_position_ok" in data && data.is_global_position_ok != undefined) {
                this.is_global_position_ok = data.is_global_position_ok;
            }
            if ("is_home_position_ok" in data && data.is_home_position_ok != undefined) {
                this.is_home_position_ok = data.is_home_position_ok;
            }
            if ("is_armable" in data && data.is_armable != undefined) {
                this.is_armable = data.is_armable;
            }
        }
    }
    get is_gyrometer_calibration_ok() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_gyrometer_calibration_ok(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get is_accelerometer_calibration_ok() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set is_accelerometer_calibration_ok(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get is_magnetometer_calibration_ok() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_magnetometer_calibration_ok(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_local_position_ok() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_local_position_ok(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_global_position_ok() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_global_position_ok(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get is_home_position_ok() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set is_home_position_ok(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_armable() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_armable(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        is_gyrometer_calibration_ok?: boolean;
        is_accelerometer_calibration_ok?: boolean;
        is_magnetometer_calibration_ok?: boolean;
        is_local_position_ok?: boolean;
        is_global_position_ok?: boolean;
        is_home_position_ok?: boolean;
        is_armable?: boolean;
    }): Health {
        const message = new Health({});
        if (data.is_gyrometer_calibration_ok != null) {
            message.is_gyrometer_calibration_ok = data.is_gyrometer_calibration_ok;
        }
        if (data.is_accelerometer_calibration_ok != null) {
            message.is_accelerometer_calibration_ok = data.is_accelerometer_calibration_ok;
        }
        if (data.is_magnetometer_calibration_ok != null) {
            message.is_magnetometer_calibration_ok = data.is_magnetometer_calibration_ok;
        }
        if (data.is_local_position_ok != null) {
            message.is_local_position_ok = data.is_local_position_ok;
        }
        if (data.is_global_position_ok != null) {
            message.is_global_position_ok = data.is_global_position_ok;
        }
        if (data.is_home_position_ok != null) {
            message.is_home_position_ok = data.is_home_position_ok;
        }
        if (data.is_armable != null) {
            message.is_armable = data.is_armable;
        }
        return message;
    }
    toObject() {
        const data: {
            is_gyrometer_calibration_ok?: boolean;
            is_accelerometer_calibration_ok?: boolean;
            is_magnetometer_calibration_ok?: boolean;
            is_local_position_ok?: boolean;
            is_global_position_ok?: boolean;
            is_home_position_ok?: boolean;
            is_armable?: boolean;
        } = {};
        if (this.is_gyrometer_calibration_ok != null) {
            data.is_gyrometer_calibration_ok = this.is_gyrometer_calibration_ok;
        }
        if (this.is_accelerometer_calibration_ok != null) {
            data.is_accelerometer_calibration_ok = this.is_accelerometer_calibration_ok;
        }
        if (this.is_magnetometer_calibration_ok != null) {
            data.is_magnetometer_calibration_ok = this.is_magnetometer_calibration_ok;
        }
        if (this.is_local_position_ok != null) {
            data.is_local_position_ok = this.is_local_position_ok;
        }
        if (this.is_global_position_ok != null) {
            data.is_global_position_ok = this.is_global_position_ok;
        }
        if (this.is_home_position_ok != null) {
            data.is_home_position_ok = this.is_home_position_ok;
        }
        if (this.is_armable != null) {
            data.is_armable = this.is_armable;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_gyrometer_calibration_ok != false)
            writer.writeBool(1, this.is_gyrometer_calibration_ok);
        if (this.is_accelerometer_calibration_ok != false)
            writer.writeBool(2, this.is_accelerometer_calibration_ok);
        if (this.is_magnetometer_calibration_ok != false)
            writer.writeBool(3, this.is_magnetometer_calibration_ok);
        if (this.is_local_position_ok != false)
            writer.writeBool(4, this.is_local_position_ok);
        if (this.is_global_position_ok != false)
            writer.writeBool(5, this.is_global_position_ok);
        if (this.is_home_position_ok != false)
            writer.writeBool(6, this.is_home_position_ok);
        if (this.is_armable != false)
            writer.writeBool(7, this.is_armable);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Health {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Health();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.is_gyrometer_calibration_ok = reader.readBool();
                    break;
                case 2:
                    message.is_accelerometer_calibration_ok = reader.readBool();
                    break;
                case 3:
                    message.is_magnetometer_calibration_ok = reader.readBool();
                    break;
                case 4:
                    message.is_local_position_ok = reader.readBool();
                    break;
                case 5:
                    message.is_global_position_ok = reader.readBool();
                    break;
                case 6:
                    message.is_home_position_ok = reader.readBool();
                    break;
                case 7:
                    message.is_armable = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Health {
        return Health.deserialize(bytes);
    }
}
export class AccelerationFrd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        forward_m_s2?: number;
        right_m_s2?: number;
        down_m_s2?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("forward_m_s2" in data && data.forward_m_s2 != undefined) {
                this.forward_m_s2 = data.forward_m_s2;
            }
            if ("right_m_s2" in data && data.right_m_s2 != undefined) {
                this.right_m_s2 = data.right_m_s2;
            }
            if ("down_m_s2" in data && data.down_m_s2 != undefined) {
                this.down_m_s2 = data.down_m_s2;
            }
        }
    }
    get forward_m_s2() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set forward_m_s2(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get right_m_s2() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set right_m_s2(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get down_m_s2() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set down_m_s2(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        forward_m_s2?: number;
        right_m_s2?: number;
        down_m_s2?: number;
    }): AccelerationFrd {
        const message = new AccelerationFrd({});
        if (data.forward_m_s2 != null) {
            message.forward_m_s2 = data.forward_m_s2;
        }
        if (data.right_m_s2 != null) {
            message.right_m_s2 = data.right_m_s2;
        }
        if (data.down_m_s2 != null) {
            message.down_m_s2 = data.down_m_s2;
        }
        return message;
    }
    toObject() {
        const data: {
            forward_m_s2?: number;
            right_m_s2?: number;
            down_m_s2?: number;
        } = {};
        if (this.forward_m_s2 != null) {
            data.forward_m_s2 = this.forward_m_s2;
        }
        if (this.right_m_s2 != null) {
            data.right_m_s2 = this.right_m_s2;
        }
        if (this.down_m_s2 != null) {
            data.down_m_s2 = this.down_m_s2;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.forward_m_s2 != 0)
            writer.writeFloat(1, this.forward_m_s2);
        if (this.right_m_s2 != 0)
            writer.writeFloat(2, this.right_m_s2);
        if (this.down_m_s2 != 0)
            writer.writeFloat(3, this.down_m_s2);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccelerationFrd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccelerationFrd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.forward_m_s2 = reader.readFloat();
                    break;
                case 2:
                    message.right_m_s2 = reader.readFloat();
                    break;
                case 3:
                    message.down_m_s2 = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccelerationFrd {
        return AccelerationFrd.deserialize(bytes);
    }
}
export class AngularVelocityFrd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        forward_rad_s?: number;
        right_rad_s?: number;
        down_rad_s?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("forward_rad_s" in data && data.forward_rad_s != undefined) {
                this.forward_rad_s = data.forward_rad_s;
            }
            if ("right_rad_s" in data && data.right_rad_s != undefined) {
                this.right_rad_s = data.right_rad_s;
            }
            if ("down_rad_s" in data && data.down_rad_s != undefined) {
                this.down_rad_s = data.down_rad_s;
            }
        }
    }
    get forward_rad_s() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set forward_rad_s(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get right_rad_s() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set right_rad_s(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get down_rad_s() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set down_rad_s(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        forward_rad_s?: number;
        right_rad_s?: number;
        down_rad_s?: number;
    }): AngularVelocityFrd {
        const message = new AngularVelocityFrd({});
        if (data.forward_rad_s != null) {
            message.forward_rad_s = data.forward_rad_s;
        }
        if (data.right_rad_s != null) {
            message.right_rad_s = data.right_rad_s;
        }
        if (data.down_rad_s != null) {
            message.down_rad_s = data.down_rad_s;
        }
        return message;
    }
    toObject() {
        const data: {
            forward_rad_s?: number;
            right_rad_s?: number;
            down_rad_s?: number;
        } = {};
        if (this.forward_rad_s != null) {
            data.forward_rad_s = this.forward_rad_s;
        }
        if (this.right_rad_s != null) {
            data.right_rad_s = this.right_rad_s;
        }
        if (this.down_rad_s != null) {
            data.down_rad_s = this.down_rad_s;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.forward_rad_s != 0)
            writer.writeFloat(1, this.forward_rad_s);
        if (this.right_rad_s != 0)
            writer.writeFloat(2, this.right_rad_s);
        if (this.down_rad_s != 0)
            writer.writeFloat(3, this.down_rad_s);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AngularVelocityFrd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AngularVelocityFrd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.forward_rad_s = reader.readFloat();
                    break;
                case 2:
                    message.right_rad_s = reader.readFloat();
                    break;
                case 3:
                    message.down_rad_s = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AngularVelocityFrd {
        return AngularVelocityFrd.deserialize(bytes);
    }
}
export class MagneticFieldFrd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        forward_gauss?: number;
        right_gauss?: number;
        down_gauss?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("forward_gauss" in data && data.forward_gauss != undefined) {
                this.forward_gauss = data.forward_gauss;
            }
            if ("right_gauss" in data && data.right_gauss != undefined) {
                this.right_gauss = data.right_gauss;
            }
            if ("down_gauss" in data && data.down_gauss != undefined) {
                this.down_gauss = data.down_gauss;
            }
        }
    }
    get forward_gauss() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set forward_gauss(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get right_gauss() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set right_gauss(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get down_gauss() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set down_gauss(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        forward_gauss?: number;
        right_gauss?: number;
        down_gauss?: number;
    }): MagneticFieldFrd {
        const message = new MagneticFieldFrd({});
        if (data.forward_gauss != null) {
            message.forward_gauss = data.forward_gauss;
        }
        if (data.right_gauss != null) {
            message.right_gauss = data.right_gauss;
        }
        if (data.down_gauss != null) {
            message.down_gauss = data.down_gauss;
        }
        return message;
    }
    toObject() {
        const data: {
            forward_gauss?: number;
            right_gauss?: number;
            down_gauss?: number;
        } = {};
        if (this.forward_gauss != null) {
            data.forward_gauss = this.forward_gauss;
        }
        if (this.right_gauss != null) {
            data.right_gauss = this.right_gauss;
        }
        if (this.down_gauss != null) {
            data.down_gauss = this.down_gauss;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.forward_gauss != 0)
            writer.writeFloat(1, this.forward_gauss);
        if (this.right_gauss != 0)
            writer.writeFloat(2, this.right_gauss);
        if (this.down_gauss != 0)
            writer.writeFloat(3, this.down_gauss);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MagneticFieldFrd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MagneticFieldFrd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.forward_gauss = reader.readFloat();
                    break;
                case 2:
                    message.right_gauss = reader.readFloat();
                    break;
                case 3:
                    message.down_gauss = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MagneticFieldFrd {
        return MagneticFieldFrd.deserialize(bytes);
    }
}
export class IMU extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        acceleration_frd?: AccelerationFrd;
        angular_velocity_frd?: AngularVelocityFrd;
        magnetic_field_frd?: MagneticFieldFrd;
        temperature_degc?: number;
        timestamp_us?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("acceleration_frd" in data && data.acceleration_frd != undefined) {
                this.acceleration_frd = data.acceleration_frd;
            }
            if ("angular_velocity_frd" in data && data.angular_velocity_frd != undefined) {
                this.angular_velocity_frd = data.angular_velocity_frd;
            }
            if ("magnetic_field_frd" in data && data.magnetic_field_frd != undefined) {
                this.magnetic_field_frd = data.magnetic_field_frd;
            }
            if ("temperature_degc" in data && data.temperature_degc != undefined) {
                this.temperature_degc = data.temperature_degc;
            }
            if ("timestamp_us" in data && data.timestamp_us != undefined) {
                this.timestamp_us = data.timestamp_us;
            }
        }
    }
    get acceleration_frd() {
        return pb_1.Message.getWrapperField(this, AccelerationFrd, 1) as AccelerationFrd;
    }
    set acceleration_frd(value: AccelerationFrd) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_acceleration_frd() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get angular_velocity_frd() {
        return pb_1.Message.getWrapperField(this, AngularVelocityFrd, 2) as AngularVelocityFrd;
    }
    set angular_velocity_frd(value: AngularVelocityFrd) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_angular_velocity_frd() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get magnetic_field_frd() {
        return pb_1.Message.getWrapperField(this, MagneticFieldFrd, 3) as MagneticFieldFrd;
    }
    set magnetic_field_frd(value: MagneticFieldFrd) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_magnetic_field_frd() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get temperature_degc() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set temperature_degc(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get timestamp_us() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set timestamp_us(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        acceleration_frd?: ReturnType<typeof AccelerationFrd.prototype.toObject>;
        angular_velocity_frd?: ReturnType<typeof AngularVelocityFrd.prototype.toObject>;
        magnetic_field_frd?: ReturnType<typeof MagneticFieldFrd.prototype.toObject>;
        temperature_degc?: number;
        timestamp_us?: number;
    }): IMU {
        const message = new IMU({});
        if (data.acceleration_frd != null) {
            message.acceleration_frd = AccelerationFrd.fromObject(data.acceleration_frd);
        }
        if (data.angular_velocity_frd != null) {
            message.angular_velocity_frd = AngularVelocityFrd.fromObject(data.angular_velocity_frd);
        }
        if (data.magnetic_field_frd != null) {
            message.magnetic_field_frd = MagneticFieldFrd.fromObject(data.magnetic_field_frd);
        }
        if (data.temperature_degc != null) {
            message.temperature_degc = data.temperature_degc;
        }
        if (data.timestamp_us != null) {
            message.timestamp_us = data.timestamp_us;
        }
        return message;
    }
    toObject() {
        const data: {
            acceleration_frd?: ReturnType<typeof AccelerationFrd.prototype.toObject>;
            angular_velocity_frd?: ReturnType<typeof AngularVelocityFrd.prototype.toObject>;
            magnetic_field_frd?: ReturnType<typeof MagneticFieldFrd.prototype.toObject>;
            temperature_degc?: number;
            timestamp_us?: number;
        } = {};
        if (this.acceleration_frd != null) {
            data.acceleration_frd = this.acceleration_frd.toObject();
        }
        if (this.angular_velocity_frd != null) {
            data.angular_velocity_frd = this.angular_velocity_frd.toObject();
        }
        if (this.magnetic_field_frd != null) {
            data.magnetic_field_frd = this.magnetic_field_frd.toObject();
        }
        if (this.temperature_degc != null) {
            data.temperature_degc = this.temperature_degc;
        }
        if (this.timestamp_us != null) {
            data.timestamp_us = this.timestamp_us;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_acceleration_frd)
            writer.writeMessage(1, this.acceleration_frd, () => this.acceleration_frd.serialize(writer));
        if (this.has_angular_velocity_frd)
            writer.writeMessage(2, this.angular_velocity_frd, () => this.angular_velocity_frd.serialize(writer));
        if (this.has_magnetic_field_frd)
            writer.writeMessage(3, this.magnetic_field_frd, () => this.magnetic_field_frd.serialize(writer));
        if (this.temperature_degc != 0)
            writer.writeFloat(4, this.temperature_degc);
        if (this.timestamp_us != 0)
            writer.writeFloat(5, this.timestamp_us);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IMU {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IMU();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.acceleration_frd, () => message.acceleration_frd = AccelerationFrd.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.angular_velocity_frd, () => message.angular_velocity_frd = AngularVelocityFrd.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.magnetic_field_frd, () => message.magnetic_field_frd = MagneticFieldFrd.deserialize(reader));
                    break;
                case 4:
                    message.temperature_degc = reader.readFloat();
                    break;
                case 5:
                    message.timestamp_us = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IMU {
        return IMU.deserialize(bytes);
    }
}
export class RawGPS extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        timestamp_us?: number;
        latitude_deg?: number;
        longitude_deg?: number;
        absolute_altitude_m?: number;
        hdop?: number;
        vdop?: number;
        velocity_m_s?: number;
        cog_deg?: number;
        altitude_ellipsoid_m?: number;
        horizontal_uncertainty_m?: number;
        vertical_uncertainty_m?: number;
        velocity_uncertainty_m_s?: number;
        heading_uncertainty_deg?: number;
        yaw_deg?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp_us" in data && data.timestamp_us != undefined) {
                this.timestamp_us = data.timestamp_us;
            }
            if ("latitude_deg" in data && data.latitude_deg != undefined) {
                this.latitude_deg = data.latitude_deg;
            }
            if ("longitude_deg" in data && data.longitude_deg != undefined) {
                this.longitude_deg = data.longitude_deg;
            }
            if ("absolute_altitude_m" in data && data.absolute_altitude_m != undefined) {
                this.absolute_altitude_m = data.absolute_altitude_m;
            }
            if ("hdop" in data && data.hdop != undefined) {
                this.hdop = data.hdop;
            }
            if ("vdop" in data && data.vdop != undefined) {
                this.vdop = data.vdop;
            }
            if ("velocity_m_s" in data && data.velocity_m_s != undefined) {
                this.velocity_m_s = data.velocity_m_s;
            }
            if ("cog_deg" in data && data.cog_deg != undefined) {
                this.cog_deg = data.cog_deg;
            }
            if ("altitude_ellipsoid_m" in data && data.altitude_ellipsoid_m != undefined) {
                this.altitude_ellipsoid_m = data.altitude_ellipsoid_m;
            }
            if ("horizontal_uncertainty_m" in data && data.horizontal_uncertainty_m != undefined) {
                this.horizontal_uncertainty_m = data.horizontal_uncertainty_m;
            }
            if ("vertical_uncertainty_m" in data && data.vertical_uncertainty_m != undefined) {
                this.vertical_uncertainty_m = data.vertical_uncertainty_m;
            }
            if ("velocity_uncertainty_m_s" in data && data.velocity_uncertainty_m_s != undefined) {
                this.velocity_uncertainty_m_s = data.velocity_uncertainty_m_s;
            }
            if ("heading_uncertainty_deg" in data && data.heading_uncertainty_deg != undefined) {
                this.heading_uncertainty_deg = data.heading_uncertainty_deg;
            }
            if ("yaw_deg" in data && data.yaw_deg != undefined) {
                this.yaw_deg = data.yaw_deg;
            }
        }
    }
    get timestamp_us() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set timestamp_us(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get latitude_deg() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set latitude_deg(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get longitude_deg() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set longitude_deg(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get absolute_altitude_m() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set absolute_altitude_m(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get hdop() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set hdop(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get vdop() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set vdop(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get velocity_m_s() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set velocity_m_s(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get cog_deg() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set cog_deg(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get altitude_ellipsoid_m() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set altitude_ellipsoid_m(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get horizontal_uncertainty_m() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set horizontal_uncertainty_m(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get vertical_uncertainty_m() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set vertical_uncertainty_m(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get velocity_uncertainty_m_s() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set velocity_uncertainty_m_s(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get heading_uncertainty_deg() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set heading_uncertainty_deg(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get yaw_deg() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set yaw_deg(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data: {
        timestamp_us?: number;
        latitude_deg?: number;
        longitude_deg?: number;
        absolute_altitude_m?: number;
        hdop?: number;
        vdop?: number;
        velocity_m_s?: number;
        cog_deg?: number;
        altitude_ellipsoid_m?: number;
        horizontal_uncertainty_m?: number;
        vertical_uncertainty_m?: number;
        velocity_uncertainty_m_s?: number;
        heading_uncertainty_deg?: number;
        yaw_deg?: number;
    }): RawGPS {
        const message = new RawGPS({});
        if (data.timestamp_us != null) {
            message.timestamp_us = data.timestamp_us;
        }
        if (data.latitude_deg != null) {
            message.latitude_deg = data.latitude_deg;
        }
        if (data.longitude_deg != null) {
            message.longitude_deg = data.longitude_deg;
        }
        if (data.absolute_altitude_m != null) {
            message.absolute_altitude_m = data.absolute_altitude_m;
        }
        if (data.hdop != null) {
            message.hdop = data.hdop;
        }
        if (data.vdop != null) {
            message.vdop = data.vdop;
        }
        if (data.velocity_m_s != null) {
            message.velocity_m_s = data.velocity_m_s;
        }
        if (data.cog_deg != null) {
            message.cog_deg = data.cog_deg;
        }
        if (data.altitude_ellipsoid_m != null) {
            message.altitude_ellipsoid_m = data.altitude_ellipsoid_m;
        }
        if (data.horizontal_uncertainty_m != null) {
            message.horizontal_uncertainty_m = data.horizontal_uncertainty_m;
        }
        if (data.vertical_uncertainty_m != null) {
            message.vertical_uncertainty_m = data.vertical_uncertainty_m;
        }
        if (data.velocity_uncertainty_m_s != null) {
            message.velocity_uncertainty_m_s = data.velocity_uncertainty_m_s;
        }
        if (data.heading_uncertainty_deg != null) {
            message.heading_uncertainty_deg = data.heading_uncertainty_deg;
        }
        if (data.yaw_deg != null) {
            message.yaw_deg = data.yaw_deg;
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp_us?: number;
            latitude_deg?: number;
            longitude_deg?: number;
            absolute_altitude_m?: number;
            hdop?: number;
            vdop?: number;
            velocity_m_s?: number;
            cog_deg?: number;
            altitude_ellipsoid_m?: number;
            horizontal_uncertainty_m?: number;
            vertical_uncertainty_m?: number;
            velocity_uncertainty_m_s?: number;
            heading_uncertainty_deg?: number;
            yaw_deg?: number;
        } = {};
        if (this.timestamp_us != null) {
            data.timestamp_us = this.timestamp_us;
        }
        if (this.latitude_deg != null) {
            data.latitude_deg = this.latitude_deg;
        }
        if (this.longitude_deg != null) {
            data.longitude_deg = this.longitude_deg;
        }
        if (this.absolute_altitude_m != null) {
            data.absolute_altitude_m = this.absolute_altitude_m;
        }
        if (this.hdop != null) {
            data.hdop = this.hdop;
        }
        if (this.vdop != null) {
            data.vdop = this.vdop;
        }
        if (this.velocity_m_s != null) {
            data.velocity_m_s = this.velocity_m_s;
        }
        if (this.cog_deg != null) {
            data.cog_deg = this.cog_deg;
        }
        if (this.altitude_ellipsoid_m != null) {
            data.altitude_ellipsoid_m = this.altitude_ellipsoid_m;
        }
        if (this.horizontal_uncertainty_m != null) {
            data.horizontal_uncertainty_m = this.horizontal_uncertainty_m;
        }
        if (this.vertical_uncertainty_m != null) {
            data.vertical_uncertainty_m = this.vertical_uncertainty_m;
        }
        if (this.velocity_uncertainty_m_s != null) {
            data.velocity_uncertainty_m_s = this.velocity_uncertainty_m_s;
        }
        if (this.heading_uncertainty_deg != null) {
            data.heading_uncertainty_deg = this.heading_uncertainty_deg;
        }
        if (this.yaw_deg != null) {
            data.yaw_deg = this.yaw_deg;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.timestamp_us != 0)
            writer.writeFloat(1, this.timestamp_us);
        if (this.latitude_deg != 0)
            writer.writeFloat(2, this.latitude_deg);
        if (this.longitude_deg != 0)
            writer.writeFloat(3, this.longitude_deg);
        if (this.absolute_altitude_m != 0)
            writer.writeFloat(4, this.absolute_altitude_m);
        if (this.hdop != 0)
            writer.writeFloat(5, this.hdop);
        if (this.vdop != 0)
            writer.writeFloat(6, this.vdop);
        if (this.velocity_m_s != 0)
            writer.writeFloat(7, this.velocity_m_s);
        if (this.cog_deg != 0)
            writer.writeFloat(8, this.cog_deg);
        if (this.altitude_ellipsoid_m != 0)
            writer.writeFloat(9, this.altitude_ellipsoid_m);
        if (this.horizontal_uncertainty_m != 0)
            writer.writeFloat(10, this.horizontal_uncertainty_m);
        if (this.vertical_uncertainty_m != 0)
            writer.writeFloat(11, this.vertical_uncertainty_m);
        if (this.velocity_uncertainty_m_s != 0)
            writer.writeFloat(12, this.velocity_uncertainty_m_s);
        if (this.heading_uncertainty_deg != 0)
            writer.writeFloat(13, this.heading_uncertainty_deg);
        if (this.yaw_deg != 0)
            writer.writeFloat(14, this.yaw_deg);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawGPS {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawGPS();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.timestamp_us = reader.readFloat();
                    break;
                case 2:
                    message.latitude_deg = reader.readFloat();
                    break;
                case 3:
                    message.longitude_deg = reader.readFloat();
                    break;
                case 4:
                    message.absolute_altitude_m = reader.readFloat();
                    break;
                case 5:
                    message.hdop = reader.readFloat();
                    break;
                case 6:
                    message.vdop = reader.readFloat();
                    break;
                case 7:
                    message.velocity_m_s = reader.readFloat();
                    break;
                case 8:
                    message.cog_deg = reader.readFloat();
                    break;
                case 9:
                    message.altitude_ellipsoid_m = reader.readFloat();
                    break;
                case 10:
                    message.horizontal_uncertainty_m = reader.readFloat();
                    break;
                case 11:
                    message.vertical_uncertainty_m = reader.readFloat();
                    break;
                case 12:
                    message.velocity_uncertainty_m_s = reader.readFloat();
                    break;
                case 13:
                    message.heading_uncertainty_deg = reader.readFloat();
                    break;
                case 14:
                    message.yaw_deg = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RawGPS {
        return RawGPS.deserialize(bytes);
    }
}
export class RcStatus extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        was_available_once?: boolean;
        is_available?: boolean;
        signal_strength_percent?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("was_available_once" in data && data.was_available_once != undefined) {
                this.was_available_once = data.was_available_once;
            }
            if ("is_available" in data && data.is_available != undefined) {
                this.is_available = data.is_available;
            }
            if ("signal_strength_percent" in data && data.signal_strength_percent != undefined) {
                this.signal_strength_percent = data.signal_strength_percent;
            }
        }
    }
    get was_available_once() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set was_available_once(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get is_available() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set is_available(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get signal_strength_percent() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set signal_strength_percent(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        was_available_once?: boolean;
        is_available?: boolean;
        signal_strength_percent?: number;
    }): RcStatus {
        const message = new RcStatus({});
        if (data.was_available_once != null) {
            message.was_available_once = data.was_available_once;
        }
        if (data.is_available != null) {
            message.is_available = data.is_available;
        }
        if (data.signal_strength_percent != null) {
            message.signal_strength_percent = data.signal_strength_percent;
        }
        return message;
    }
    toObject() {
        const data: {
            was_available_once?: boolean;
            is_available?: boolean;
            signal_strength_percent?: number;
        } = {};
        if (this.was_available_once != null) {
            data.was_available_once = this.was_available_once;
        }
        if (this.is_available != null) {
            data.is_available = this.is_available;
        }
        if (this.signal_strength_percent != null) {
            data.signal_strength_percent = this.signal_strength_percent;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.was_available_once != false)
            writer.writeBool(1, this.was_available_once);
        if (this.is_available != false)
            writer.writeBool(2, this.is_available);
        if (this.signal_strength_percent != 0)
            writer.writeFloat(3, this.signal_strength_percent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RcStatus {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RcStatus();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.was_available_once = reader.readBool();
                    break;
                case 2:
                    message.is_available = reader.readBool();
                    break;
                case 3:
                    message.signal_strength_percent = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RcStatus {
        return RcStatus.deserialize(bytes);
    }
}
export class GpsInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        num_satellites?: number;
        fix_type?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("num_satellites" in data && data.num_satellites != undefined) {
                this.num_satellites = data.num_satellites;
            }
            if ("fix_type" in data && data.fix_type != undefined) {
                this.fix_type = data.fix_type;
            }
        }
    }
    get num_satellites() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set num_satellites(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get fix_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set fix_type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        num_satellites?: number;
        fix_type?: string;
    }): GpsInfo {
        const message = new GpsInfo({});
        if (data.num_satellites != null) {
            message.num_satellites = data.num_satellites;
        }
        if (data.fix_type != null) {
            message.fix_type = data.fix_type;
        }
        return message;
    }
    toObject() {
        const data: {
            num_satellites?: number;
            fix_type?: string;
        } = {};
        if (this.num_satellites != null) {
            data.num_satellites = this.num_satellites;
        }
        if (this.fix_type != null) {
            data.fix_type = this.fix_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.num_satellites != 0)
            writer.writeFloat(1, this.num_satellites);
        if (this.fix_type.length)
            writer.writeString(2, this.fix_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GpsInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GpsInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.num_satellites = reader.readFloat();
                    break;
                case 2:
                    message.fix_type = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GpsInfo {
        return GpsInfo.deserialize(bytes);
    }
}
export class FlightMode extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): FlightMode {
        const message = new FlightMode({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightMode {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightMode();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FlightMode {
        return FlightMode.deserialize(bytes);
    }
}
export class MissionStatus extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        completed?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("completed" in data && data.completed != undefined) {
                this.completed = data.completed;
            }
        }
    }
    get completed() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set completed(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        completed?: boolean;
    }): MissionStatus {
        const message = new MissionStatus({});
        if (data.completed != null) {
            message.completed = data.completed;
        }
        return message;
    }
    toObject() {
        const data: {
            completed?: boolean;
        } = {};
        if (this.completed != null) {
            data.completed = this.completed;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.completed != false)
            writer.writeBool(1, this.completed);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissionStatus {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissionStatus();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.completed = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MissionStatus {
        return MissionStatus.deserialize(bytes);
    }
}
export class Heading extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        heading_deg?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("heading_deg" in data && data.heading_deg != undefined) {
                this.heading_deg = data.heading_deg;
            }
        }
    }
    get heading_deg() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set heading_deg(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        heading_deg?: number;
    }): Heading {
        const message = new Heading({});
        if (data.heading_deg != null) {
            message.heading_deg = data.heading_deg;
        }
        return message;
    }
    toObject() {
        const data: {
            heading_deg?: number;
        } = {};
        if (this.heading_deg != null) {
            data.heading_deg = this.heading_deg;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.heading_deg != 0)
            writer.writeFloat(1, this.heading_deg);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Heading {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Heading();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.heading_deg = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Heading {
        return Heading.deserialize(bytes);
    }
}
export class VtolState extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): VtolState {
        const message = new VtolState({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VtolState {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VtolState();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VtolState {
        return VtolState.deserialize(bytes);
    }
}
export class Armed extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set value(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: boolean;
    }): Armed {
        const message = new Armed({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: boolean;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value != false)
            writer.writeBool(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Armed {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Armed();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Armed {
        return Armed.deserialize(bytes);
    }
}
export class StatusText extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: string;
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: string;
        text?: string;
    }): StatusText {
        const message = new StatusText({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.text != null) {
            message.text = data.text;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: string;
            text?: string;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type.length)
            writer.writeString(1, this.type);
        if (this.text.length)
            writer.writeString(2, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusText {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusText();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readString();
                    break;
                case 2:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StatusText {
        return StatusText.deserialize(bytes);
    }
}
export class BboxData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        bbox?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("bbox" in data && data.bbox != undefined) {
                this.bbox = data.bbox;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get bbox() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set bbox(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        bbox?: number[];
    }): BboxData {
        const message = new BboxData({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.bbox != null) {
            message.bbox = data.bbox;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            bbox?: number[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.bbox != null) {
            data.bbox = this.bbox;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.bbox.length)
            writer.writePackedInt64(2, this.bbox);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BboxData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BboxData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.bbox = reader.readPackedInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BboxData {
        return BboxData.deserialize(bytes);
    }
}
export class Radio extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: string;
        rssi?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("rssi" in data && data.rssi != undefined) {
                this.rssi = data.rssi;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get rssi() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rssi(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: string;
        rssi?: number;
    }): Radio {
        const message = new Radio({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.rssi != null) {
            message.rssi = data.rssi;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: string;
            rssi?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.rssi != null) {
            data.rssi = this.rssi;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type.length)
            writer.writeString(1, this.type);
        if (this.rssi != 0)
            writer.writeInt64(2, this.rssi);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Radio {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Radio();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readString();
                    break;
                case 2:
                    message.rssi = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Radio {
        return Radio.deserialize(bytes);
    }
}
export class Telem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        altitude?: Altitude;
        battery?: Battery;
        attitude?: Attitude;
        fixedwingMatrics?: FixedwingMatrics;
        health?: Health;
        imu?: IMU;
        rawGps?: RawGPS;
        rcStatus?: RcStatus;
        position?: Position;
        gpsInfo?: GpsInfo;
        flightMode?: FlightMode;
        heading?: Heading;
        vtolState?: VtolState;
        armed?: Armed;
        statusText?: StatusText;
        missionStatus?: MissionStatus;
        bboxes?: BboxData[];
        radio?: Radio;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("altitude" in data && data.altitude != undefined) {
                this.altitude = data.altitude;
            }
            if ("battery" in data && data.battery != undefined) {
                this.battery = data.battery;
            }
            if ("attitude" in data && data.attitude != undefined) {
                this.attitude = data.attitude;
            }
            if ("fixedwingMatrics" in data && data.fixedwingMatrics != undefined) {
                this.fixedwingMatrics = data.fixedwingMatrics;
            }
            if ("health" in data && data.health != undefined) {
                this.health = data.health;
            }
            if ("imu" in data && data.imu != undefined) {
                this.imu = data.imu;
            }
            if ("rawGps" in data && data.rawGps != undefined) {
                this.rawGps = data.rawGps;
            }
            if ("rcStatus" in data && data.rcStatus != undefined) {
                this.rcStatus = data.rcStatus;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("gpsInfo" in data && data.gpsInfo != undefined) {
                this.gpsInfo = data.gpsInfo;
            }
            if ("flightMode" in data && data.flightMode != undefined) {
                this.flightMode = data.flightMode;
            }
            if ("heading" in data && data.heading != undefined) {
                this.heading = data.heading;
            }
            if ("vtolState" in data && data.vtolState != undefined) {
                this.vtolState = data.vtolState;
            }
            if ("armed" in data && data.armed != undefined) {
                this.armed = data.armed;
            }
            if ("statusText" in data && data.statusText != undefined) {
                this.statusText = data.statusText;
            }
            if ("missionStatus" in data && data.missionStatus != undefined) {
                this.missionStatus = data.missionStatus;
            }
            if ("bboxes" in data && data.bboxes != undefined) {
                this.bboxes = data.bboxes;
            }
            if ("radio" in data && data.radio != undefined) {
                this.radio = data.radio;
            }
        }
    }
    get altitude() {
        return pb_1.Message.getWrapperField(this, Altitude, 1) as Altitude;
    }
    set altitude(value: Altitude) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_altitude() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get battery() {
        return pb_1.Message.getWrapperField(this, Battery, 2) as Battery;
    }
    set battery(value: Battery) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_battery() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get attitude() {
        return pb_1.Message.getWrapperField(this, Attitude, 3) as Attitude;
    }
    set attitude(value: Attitude) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_attitude() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get fixedwingMatrics() {
        return pb_1.Message.getWrapperField(this, FixedwingMatrics, 4) as FixedwingMatrics;
    }
    set fixedwingMatrics(value: FixedwingMatrics) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_fixedwingMatrics() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get health() {
        return pb_1.Message.getWrapperField(this, Health, 5) as Health;
    }
    set health(value: Health) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_health() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get imu() {
        return pb_1.Message.getWrapperField(this, IMU, 6) as IMU;
    }
    set imu(value: IMU) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_imu() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get rawGps() {
        return pb_1.Message.getWrapperField(this, RawGPS, 7) as RawGPS;
    }
    set rawGps(value: RawGPS) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_rawGps() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get rcStatus() {
        return pb_1.Message.getWrapperField(this, RcStatus, 8) as RcStatus;
    }
    set rcStatus(value: RcStatus) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_rcStatus() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get position() {
        return pb_1.Message.getWrapperField(this, Position, 9) as Position;
    }
    set position(value: Position) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_position() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get gpsInfo() {
        return pb_1.Message.getWrapperField(this, GpsInfo, 10) as GpsInfo;
    }
    set gpsInfo(value: GpsInfo) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_gpsInfo() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get flightMode() {
        return pb_1.Message.getWrapperField(this, FlightMode, 11) as FlightMode;
    }
    set flightMode(value: FlightMode) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_flightMode() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get heading() {
        return pb_1.Message.getWrapperField(this, Heading, 12) as Heading;
    }
    set heading(value: Heading) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_heading() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get vtolState() {
        return pb_1.Message.getWrapperField(this, VtolState, 13) as VtolState;
    }
    set vtolState(value: VtolState) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_vtolState() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get armed() {
        return pb_1.Message.getWrapperField(this, Armed, 14) as Armed;
    }
    set armed(value: Armed) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get has_armed() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get statusText() {
        return pb_1.Message.getWrapperField(this, StatusText, 15) as StatusText;
    }
    set statusText(value: StatusText) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_statusText() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get missionStatus() {
        return pb_1.Message.getWrapperField(this, MissionStatus, 16) as MissionStatus;
    }
    set missionStatus(value: MissionStatus) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_missionStatus() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get bboxes() {
        return pb_1.Message.getRepeatedWrapperField(this, BboxData, 17) as BboxData[];
    }
    set bboxes(value: BboxData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 17, value);
    }
    get radio() {
        return pb_1.Message.getWrapperField(this, Radio, 18) as Radio;
    }
    set radio(value: Radio) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get has_radio() {
        return pb_1.Message.getField(this, 18) != null;
    }
    static fromObject(data: {
        altitude?: ReturnType<typeof Altitude.prototype.toObject>;
        battery?: ReturnType<typeof Battery.prototype.toObject>;
        attitude?: ReturnType<typeof Attitude.prototype.toObject>;
        fixedwingMatrics?: ReturnType<typeof FixedwingMatrics.prototype.toObject>;
        health?: ReturnType<typeof Health.prototype.toObject>;
        imu?: ReturnType<typeof IMU.prototype.toObject>;
        rawGps?: ReturnType<typeof RawGPS.prototype.toObject>;
        rcStatus?: ReturnType<typeof RcStatus.prototype.toObject>;
        position?: ReturnType<typeof Position.prototype.toObject>;
        gpsInfo?: ReturnType<typeof GpsInfo.prototype.toObject>;
        flightMode?: ReturnType<typeof FlightMode.prototype.toObject>;
        heading?: ReturnType<typeof Heading.prototype.toObject>;
        vtolState?: ReturnType<typeof VtolState.prototype.toObject>;
        armed?: ReturnType<typeof Armed.prototype.toObject>;
        statusText?: ReturnType<typeof StatusText.prototype.toObject>;
        missionStatus?: ReturnType<typeof MissionStatus.prototype.toObject>;
        bboxes?: ReturnType<typeof BboxData.prototype.toObject>[];
        radio?: ReturnType<typeof Radio.prototype.toObject>;
    }): Telem {
        const message = new Telem({});
        if (data.altitude != null) {
            message.altitude = Altitude.fromObject(data.altitude);
        }
        if (data.battery != null) {
            message.battery = Battery.fromObject(data.battery);
        }
        if (data.attitude != null) {
            message.attitude = Attitude.fromObject(data.attitude);
        }
        if (data.fixedwingMatrics != null) {
            message.fixedwingMatrics = FixedwingMatrics.fromObject(data.fixedwingMatrics);
        }
        if (data.health != null) {
            message.health = Health.fromObject(data.health);
        }
        if (data.imu != null) {
            message.imu = IMU.fromObject(data.imu);
        }
        if (data.rawGps != null) {
            message.rawGps = RawGPS.fromObject(data.rawGps);
        }
        if (data.rcStatus != null) {
            message.rcStatus = RcStatus.fromObject(data.rcStatus);
        }
        if (data.position != null) {
            message.position = Position.fromObject(data.position);
        }
        if (data.gpsInfo != null) {
            message.gpsInfo = GpsInfo.fromObject(data.gpsInfo);
        }
        if (data.flightMode != null) {
            message.flightMode = FlightMode.fromObject(data.flightMode);
        }
        if (data.heading != null) {
            message.heading = Heading.fromObject(data.heading);
        }
        if (data.vtolState != null) {
            message.vtolState = VtolState.fromObject(data.vtolState);
        }
        if (data.armed != null) {
            message.armed = Armed.fromObject(data.armed);
        }
        if (data.statusText != null) {
            message.statusText = StatusText.fromObject(data.statusText);
        }
        if (data.missionStatus != null) {
            message.missionStatus = MissionStatus.fromObject(data.missionStatus);
        }
        if (data.bboxes != null) {
            message.bboxes = data.bboxes.map(item => BboxData.fromObject(item));
        }
        if (data.radio != null) {
            message.radio = Radio.fromObject(data.radio);
        }
        return message;
    }
    toObject() {
        const data: {
            altitude?: ReturnType<typeof Altitude.prototype.toObject>;
            battery?: ReturnType<typeof Battery.prototype.toObject>;
            attitude?: ReturnType<typeof Attitude.prototype.toObject>;
            fixedwingMatrics?: ReturnType<typeof FixedwingMatrics.prototype.toObject>;
            health?: ReturnType<typeof Health.prototype.toObject>;
            imu?: ReturnType<typeof IMU.prototype.toObject>;
            rawGps?: ReturnType<typeof RawGPS.prototype.toObject>;
            rcStatus?: ReturnType<typeof RcStatus.prototype.toObject>;
            position?: ReturnType<typeof Position.prototype.toObject>;
            gpsInfo?: ReturnType<typeof GpsInfo.prototype.toObject>;
            flightMode?: ReturnType<typeof FlightMode.prototype.toObject>;
            heading?: ReturnType<typeof Heading.prototype.toObject>;
            vtolState?: ReturnType<typeof VtolState.prototype.toObject>;
            armed?: ReturnType<typeof Armed.prototype.toObject>;
            statusText?: ReturnType<typeof StatusText.prototype.toObject>;
            missionStatus?: ReturnType<typeof MissionStatus.prototype.toObject>;
            bboxes?: ReturnType<typeof BboxData.prototype.toObject>[];
            radio?: ReturnType<typeof Radio.prototype.toObject>;
        } = {};
        if (this.altitude != null) {
            data.altitude = this.altitude.toObject();
        }
        if (this.battery != null) {
            data.battery = this.battery.toObject();
        }
        if (this.attitude != null) {
            data.attitude = this.attitude.toObject();
        }
        if (this.fixedwingMatrics != null) {
            data.fixedwingMatrics = this.fixedwingMatrics.toObject();
        }
        if (this.health != null) {
            data.health = this.health.toObject();
        }
        if (this.imu != null) {
            data.imu = this.imu.toObject();
        }
        if (this.rawGps != null) {
            data.rawGps = this.rawGps.toObject();
        }
        if (this.rcStatus != null) {
            data.rcStatus = this.rcStatus.toObject();
        }
        if (this.position != null) {
            data.position = this.position.toObject();
        }
        if (this.gpsInfo != null) {
            data.gpsInfo = this.gpsInfo.toObject();
        }
        if (this.flightMode != null) {
            data.flightMode = this.flightMode.toObject();
        }
        if (this.heading != null) {
            data.heading = this.heading.toObject();
        }
        if (this.vtolState != null) {
            data.vtolState = this.vtolState.toObject();
        }
        if (this.armed != null) {
            data.armed = this.armed.toObject();
        }
        if (this.statusText != null) {
            data.statusText = this.statusText.toObject();
        }
        if (this.missionStatus != null) {
            data.missionStatus = this.missionStatus.toObject();
        }
        if (this.bboxes != null) {
            data.bboxes = this.bboxes.map((item: BboxData) => item.toObject());
        }
        if (this.radio != null) {
            data.radio = this.radio.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_altitude)
            writer.writeMessage(1, this.altitude, () => this.altitude.serialize(writer));
        if (this.has_battery)
            writer.writeMessage(2, this.battery, () => this.battery.serialize(writer));
        if (this.has_attitude)
            writer.writeMessage(3, this.attitude, () => this.attitude.serialize(writer));
        if (this.has_fixedwingMatrics)
            writer.writeMessage(4, this.fixedwingMatrics, () => this.fixedwingMatrics.serialize(writer));
        if (this.has_health)
            writer.writeMessage(5, this.health, () => this.health.serialize(writer));
        if (this.has_imu)
            writer.writeMessage(6, this.imu, () => this.imu.serialize(writer));
        if (this.has_rawGps)
            writer.writeMessage(7, this.rawGps, () => this.rawGps.serialize(writer));
        if (this.has_rcStatus)
            writer.writeMessage(8, this.rcStatus, () => this.rcStatus.serialize(writer));
        if (this.has_position)
            writer.writeMessage(9, this.position, () => this.position.serialize(writer));
        if (this.has_gpsInfo)
            writer.writeMessage(10, this.gpsInfo, () => this.gpsInfo.serialize(writer));
        if (this.has_flightMode)
            writer.writeMessage(11, this.flightMode, () => this.flightMode.serialize(writer));
        if (this.has_heading)
            writer.writeMessage(12, this.heading, () => this.heading.serialize(writer));
        if (this.has_vtolState)
            writer.writeMessage(13, this.vtolState, () => this.vtolState.serialize(writer));
        if (this.has_armed)
            writer.writeMessage(14, this.armed, () => this.armed.serialize(writer));
        if (this.has_statusText)
            writer.writeMessage(15, this.statusText, () => this.statusText.serialize(writer));
        if (this.has_missionStatus)
            writer.writeMessage(16, this.missionStatus, () => this.missionStatus.serialize(writer));
        if (this.bboxes.length)
            writer.writeRepeatedMessage(17, this.bboxes, (item: BboxData) => item.serialize(writer));
        if (this.has_radio)
            writer.writeMessage(18, this.radio, () => this.radio.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Telem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Telem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.altitude, () => message.altitude = Altitude.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.battery, () => message.battery = Battery.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.attitude, () => message.attitude = Attitude.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.fixedwingMatrics, () => message.fixedwingMatrics = FixedwingMatrics.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.health, () => message.health = Health.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.imu, () => message.imu = IMU.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.rawGps, () => message.rawGps = RawGPS.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.rcStatus, () => message.rcStatus = RcStatus.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.gpsInfo, () => message.gpsInfo = GpsInfo.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.flightMode, () => message.flightMode = FlightMode.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.heading, () => message.heading = Heading.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.vtolState, () => message.vtolState = VtolState.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.armed, () => message.armed = Armed.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.statusText, () => message.statusText = StatusText.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.missionStatus, () => message.missionStatus = MissionStatus.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.bboxes, () => pb_1.Message.addToRepeatedWrapperField(message, 17, BboxData.deserialize(reader), BboxData));
                    break;
                case 18:
                    reader.readMessage(message.radio, () => message.radio = Radio.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Telem {
        return Telem.deserialize(bytes);
    }
}
export class Data extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        droneId?: string;
        baseId?: string;
        telem?: Telem;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("droneId" in data && data.droneId != undefined) {
                this.droneId = data.droneId;
            }
            if ("baseId" in data && data.baseId != undefined) {
                this.baseId = data.baseId;
            }
            if ("telem" in data && data.telem != undefined) {
                this.telem = data.telem;
            }
        }
    }
    get droneId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set droneId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get baseId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set baseId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get telem() {
        return pb_1.Message.getWrapperField(this, Telem, 3) as Telem;
    }
    set telem(value: Telem) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_telem() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        droneId?: string;
        baseId?: string;
        telem?: ReturnType<typeof Telem.prototype.toObject>;
    }): Data {
        const message = new Data({});
        if (data.droneId != null) {
            message.droneId = data.droneId;
        }
        if (data.baseId != null) {
            message.baseId = data.baseId;
        }
        if (data.telem != null) {
            message.telem = Telem.fromObject(data.telem);
        }
        return message;
    }
    toObject() {
        const data: {
            droneId?: string;
            baseId?: string;
            telem?: ReturnType<typeof Telem.prototype.toObject>;
        } = {};
        if (this.droneId != null) {
            data.droneId = this.droneId;
        }
        if (this.baseId != null) {
            data.baseId = this.baseId;
        }
        if (this.telem != null) {
            data.telem = this.telem.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.droneId.length)
            writer.writeString(1, this.droneId);
        if (this.baseId.length)
            writer.writeString(2, this.baseId);
        if (this.has_telem)
            writer.writeMessage(3, this.telem, () => this.telem.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Data();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.droneId = reader.readString();
                    break;
                case 2:
                    message.baseId = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.telem, () => message.telem = Telem.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Data {
        return Data.deserialize(bytes);
    }
}
